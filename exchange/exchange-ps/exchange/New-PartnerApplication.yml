### YamlMime:PowershellCmdlet
summary: |-
  This cmdlet is functional only in on-premises Exchange.

  Use the New-PartnerApplication cmdlet to create partner application configurations in on-premises Exchange organizations.

  For information about the parameter sets in the Syntax section below, see [Exchange cmdlet syntax](https://learn.microsoft.com/powershell/exchange/exchange-cmdlet-syntax).
module: ExchangePowerShell
notes: ""
inputs:
- name: <xref href="Input types" data-throw-if-not-resolved="False" />
  description: |-
    To see the input types that this cmdlet accepts, see [Cmdlet Input and Output Types](https://go.microsoft.com/fwlink/p/?linkId=616387). If the Input Type field for a cmdlet is blank, the cmdlet doesn't accept input data.
outputs:
- name: <xref href="Output types" data-throw-if-not-resolved="False" />
  description: |-
    To see the return types, which are also known as output types, that this cmdlet accepts, see [Cmdlet Input and Output Types](https://go.microsoft.com/fwlink/p/?linkId=616387). If the Output Type field is blank, the cmdlet doesn't return data.
syntaxes:
- >-
  New-PartnerApplication [-Name] <String> -ApplicationIdentifier <String>

   [-Realm <String>]

   [-AcceptSecurityIdentifierInformation <Boolean>]

   [-AccountType <SupportedAccountType>]

   [-ActAsPermissions <String[]>]

   [-AppOnlyPermissions <String[]>]

   [-Confirm]

   [-DomainController <Fqdn>]

   [-Enabled <Boolean>]

   [-IssuerIdentifier <String>]

   [-LinkedAccount <UserIdParameter>]

   [-WhatIf]

   [<CommonParameters>]
- >-
  New-PartnerApplication [-Name] <String> -AuthMetadataUrl <String>

   [-TrustAnySSLCertificate]

   [-AcceptSecurityIdentifierInformation <Boolean>]

   [-AccountType <SupportedAccountType>]

   [-ActAsPermissions <String[]>]

   [-AppOnlyPermissions <String[]>]

   [-Confirm]

   [-DomainController <Fqdn>]

   [-Enabled <Boolean>]

   [-IssuerIdentifier <String>]

   [-LinkedAccount <UserIdParameter>]

   [-WhatIf]

   [<CommonParameters>]
examples:
- title: Example 1
  code: |-
    New-PartnerApplication -Name HRApp -ApplicationIdentifier 00000006-0000-0dd1-ac00-000000000000
  description: |-
    This example creates a new HRApp partner application named HRApp.
  summary: ""
parameters:
- type: <xref href="Boolean" data-throw-if-not-resolved="False" />
  name: AcceptSecurityIdentifierInformation
  description: |+
    The AcceptSecurityIdentifierInformation parameter specifies whether Exchange should accept security identifiers (SIDs) from another trusted Active Directory forest for the partner application. By default, new partner applications are configured to not accept SIDs from another forest. If you're in deployment with a trusted forest, set the parameter to $true.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2013
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  parameterValueGroup: ""
- type: <xref href="SupportedAccountType" data-throw-if-not-resolved="False" />
  name: AccountType
  description: |+
    The AccountType parameter specifies the type of Microsoft account that's required for the partner application. Valid values are:

    - OrganizationalAccount (This is the default value)
    - ConsumerAccount

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: ActAsPermissions
  description: |+
    This parameter is available only in Exchange Server 2013.

    This parameter is reserved for internal Microsoft use.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2013
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ApplicationIdentifier
  isRequired: true
  description: |+
    The ApplicationIdentifier parameter specifies a unique application identifier for the partner application that uses an authorization server. When specifying a value for the ApplicationIdentifier parameter, you must also use the UseAuthServer parameter.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2013
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: AppOnlyPermissions
  description: |+
    This parameter is available only in Exchange Server 2013.

    This parameter is reserved for internal Microsoft use.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2013
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: AuthMetadataUrl
  isRequired: true
  description: |+
    This parameter is available only in on-premises Exchange.

    The AuthMetadataUrl parameter specifies the URL that Exchange can retrieve the AuthMetadata document from for a partner application that doesn't use an authorization server. When specifying the AuthMetadataUrl parameter for a partner application, you can't specify the ApplicationIdentifier and UseAuthServer parameters.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2013
  - Exchange Server 2016
  - Exchange Server 2019
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    The Confirm switch specifies whether to show or hide the confirmation prompt. How this switch affects the cmdlet depends on if the cmdlet requires confirmation before proceeding.

    - Destructive cmdlets (for example, Remove-\* cmdlets) have a built-in pause that forces you to acknowledge the command before proceeding. For these cmdlets, you can skip the confirmation prompt by using this exact syntax: `-Confirm:$false`.
    - Most other cmdlets (for example, New-\* and Set-\* cmdlets) don't have a built-in pause. For these cmdlets, specifying the Confirm switch without a value introduces a pause that forces you acknowledge the command before proceeding.

  defaultValue: None
  position: Named
  aliases: cf
  applicable:
  - Exchange Server 2013
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  parameterValueGroup: ""
- type: <xref href="Fqdn" data-throw-if-not-resolved="False" />
  name: DomainController
  description: |+
    This parameter is available only in on-premises Exchange.

    The DomainController parameter specifies the domain controller that's used by this cmdlet to read data from or write data to Active Directory. You identify the domain controller by its fully qualified domain name (FQDN). For example, dc01.contoso.com.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2013
  - Exchange Server 2016
  - Exchange Server 2019
  parameterValueGroup: ""
- type: <xref href="Boolean" data-throw-if-not-resolved="False" />
  name: Enabled
  description: |+
    The Enabled parameter specifies whether the partner application is enabled. By default, new partner applications are enabled. Set the parameter to $false to create the application configuration in a disabled state.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2013
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: IssuerIdentifier
  description: |+
    This parameter is available only in Exchange Server 2013.

    This parameter is reserved for internal Microsoft use.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2013
  parameterValueGroup: ""
- type: <xref href="UserIdParameter" data-throw-if-not-resolved="False" />
  name: LinkedAccount
  description: |+
    The LinkedAccount parameter specifies a linked Active Directory user account for the application. Exchange evaluates Role Based Access Control (RBAC) permissions for the linked account when authorizing a token used to perform a task.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2013
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    The Name parameter specifies a name for the partner application.

  defaultValue: None
  position: "1"
  aliases: ""
  applicable:
  - Exchange Server 2013
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Realm
  description: |+
    This parameter is available only in on-premises Exchange.

    The Realm parameter specifies a security realm for the partner application. If the token is from a domain that's not an accepted domain, Exchange checks the realm specified in the token. In such a scenario, only tokens with the same realm specified in the partner application can access Exchange resources.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2013
  - Exchange Server 2016
  - Exchange Server 2019
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: TrustAnySSLCertificate
  description: |+
    This parameter is available only in on-premises Exchange.

    The TrustAnySSLCertificate switch allows Exchange to accept certificates from untrusted certification authorities (CAs). You don't need to specify a value with this switch.

    We don't recommend using this switch in a production environment.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2013
  - Exchange Server 2016
  - Exchange Server 2019
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    The WhatIf switch simulates the actions of the command. You can use this switch to view the changes that would occur without actually applying those changes. You don't need to specify a value with this switch.

  defaultValue: None
  position: Named
  aliases: wi
  applicable:
  - Exchange Server 2013
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  parameterValueGroup: ""
applicable:
- Exchange Server 2013
- Exchange Server 2016
- Exchange Server 2019
- Exchange Online
uid: ExchangePowerShell.New-PartnerApplication
name: New-PartnerApplication
description: |-
  You can configure partner applications such as Microsoft SharePoint to access Exchange resources. Use the New-PartnerApplication cmdlet to create a partner application configuration for an application that needs to access Exchange resources. For details, see [Plan Exchange 2016 integration with SharePoint and Skype for Business](https://learn.microsoft.com/Exchange/plan-and-deploy/integration-with-sharepoint-and-skype/integration-with-sharepoint-and-skype).

  We recommend that you use the Configure-EnterprisePartnerApplication.ps1 script in the %ExchangeInstallPath%Scripts folder to configure partner applications.

  You need to be assigned permissions before you can run this cmdlet. Although this topic lists all parameters for the cmdlet, you may not have access to some parameters if they're not included in the permissions assigned to you. To find the permissions required to run any cmdlet or parameter in your organization, see [Find the permissions required to run any Exchange cmdlet](https://learn.microsoft.com/powershell/exchange/find-exchange-cmdlet-permissions).
metadata:
  external help file: Microsoft.Exchange.RolesAndAccess-Help.xml
  online version: https://learn.microsoft.com/powershell/module/exchange/new-partnerapplication
  applicable: Exchange Server 2013, Exchange Server 2016, Exchange Server 2019, Exchange Online
  title: New-PartnerApplication
  schema: 2.0.0
  author: chrisda
  ms.author: chrisda
  ms.reviewer: ""
