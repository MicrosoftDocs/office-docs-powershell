### YamlMime:PowershellCmdlet
summary: |-
  This cmdlet is available only in Security & Compliance PowerShell. For more information, see [Security & Compliance PowerShell](https://learn.microsoft.com/powershell/exchange/scc-powershell).

  Use the Stop-InformationBarrierPoliciesApplication cmdlet to stop the process of applying information barrier policies in the Microsoft Purview compliance portal.

  For information about the parameter sets in the Syntax section below, see [Exchange cmdlet syntax](https://learn.microsoft.com/powershell/exchange/exchange-cmdlet-syntax).
module: ExchangePowerShell
notes: ""
links:
- text: Define policies for information barriers
  href: https://learn.microsoft.com/purview/information-barriers-policies
- text: Edit (or remove) information barrier policies
  href: https://learn.microsoft.com/purview/information-barriers-edit-segments-policies
syntaxes:
- >-
  Stop-InformationBarrierPoliciesApplication [-Identity] <PolicyIdParameter>

   [-Confirm]

   [-WhatIf]

   [<CommonParameters>]
examples:
- title: Example 1
  code: |-
    InformationBarrierPoliciesApplication -Identity 46237888-12ca-42e3-a541-3fcb7b5231d1
  description: |-
    This example stops the application of information barrier policies per the policy application with the specified Identity value.
  summary: ""
parameters:
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    The Confirm switch specifies whether to show or hide the confirmation prompt. How this switch affects the cmdlet depends on if the cmdlet requires confirmation before proceeding.

    - Destructive cmdlets (for example, Remove-\* cmdlets) have a built-in pause that forces you to acknowledge the command before proceeding. For these cmdlets, you can skip the confirmation prompt by using this exact syntax: `-Confirm:$false`.
    - Most other cmdlets (for example, New-\* and Set-\* cmdlets) don't have a built-in pause. For these cmdlets, specifying the Confirm switch without a value introduces a pause that forces you acknowledge the command before proceeding.

  defaultValue: None
  position: Named
  aliases: cf
  applicable:
  - Security & Compliance
  parameterValueGroup: ""
- type: <xref href="PolicyIdParameter" data-throw-if-not-resolved="False" />
  name: Identity
  isRequired: true
  description: |+
    The Identity parameter specifies the active application of information barrier policies that you want to stop. This value is a GUID that's assigned when you run the Start-InformationBarrierPoliciesApplication cmdlet (for example, 46237888-12ca-42e3-a541-3fcb7b5231d1). You can also find the Identity value of the most recent policy application running the command Get-InformationBarrierPoliciesApplicationStatus.

  defaultValue: None
  pipelineInput: true
  position: "0"
  aliases: ""
  applicable:
  - Security & Compliance
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    The WhatIf switch doesn't work in Security & Compliance PowerShell.

  defaultValue: None
  position: Named
  aliases: wi
  applicable:
  - Security & Compliance
  parameterValueGroup: ""
applicable:
- Security & Compliance
uid: ExchangePowerShell.Stop-InformationBarrierPoliciesApplication
name: Stop-InformationBarrierPoliciesApplication
description: |-
  To use this cmdlet in Security & Compliance PowerShell, you need to be assigned permissions. For more information, see [Permissions in the Microsoft Purview compliance portal](https://learn.microsoft.com/purview/microsoft-365-compliance-center-permissions).
metadata:
  external help file: Microsoft.Exchange.TransportMailflow-Help.xml
  online version: https://learn.microsoft.com/powershell/module/exchange/stop-informationbarrierpoliciesapplication
  applicable: Security & Compliance
  title: Stop-InformationBarrierPoliciesApplication
  schema: 2.0.0
  author: chrisda
  ms.author: chrisda
  ms.reviewer: ""
