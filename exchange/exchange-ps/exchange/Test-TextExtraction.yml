### YamlMime:PowershellCmdlet
summary: |-
  This cmdlet is available in on-premises Exchange and in the cloud-based service. Some parameters and settings may be exclusive to one environment or the other.

  Use the Test-TextExtraction cmdlet to find the text that is extracted from a specified email message in Exchange flow.

  For information about the parameter sets in the Syntax section below, see [Exchange cmdlet syntax](https://learn.microsoft.com/powershell/exchange/exchange-cmdlet-syntax).
module: ExchangePowerShell
notes: ""
syntaxes:
- >-
  Test-TextExtraction [-FileData] <Byte[]>

   [-Confirm]

   [-DomainController <Fqdn>]

   [-WhatIf]

   [<CommonParameters>]
examples:
- title: Example 1
  code: |-
    $content = Test-TextExtraction -FileData ([System.IO.File]::ReadAllBytes('.\financial data.msg'))

    $content.ExtractedResults
  description: |-
    This example returns the text that's extracted from the email "financial data.msg"
  summary: ""
- title: Example 2
  code: |-
    $content = Test-TextExtraction -FileData ([System.IO.File]::ReadAllBytes('.\financial data.msg'))

    Test-DataClassification -TestTextExtractionResults $content.ExtractedResults
  description: |-
    This example extracts the text from the email "financial data.msg" and returns the sensitive information types, their confidence, and count.
  summary: ""
parameters:
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    The Confirm switch specifies whether to show or hide the confirmation prompt. How this switch affects the cmdlet depends on if the cmdlet requires confirmation before proceeding.

    - Destructive cmdlets (for example, Remove-\* cmdlets) have a built-in pause that forces you to acknowledge the command before proceeding. For these cmdlets, you can skip the confirmation prompt by using this exact syntax: `-Confirm:$false`.
    - Most other cmdlets (for example, New-\* and Set-\* cmdlets) don't have a built-in pause. For these cmdlets, specifying the Confirm switch without a value introduces a pause that forces you acknowledge the command before proceeding.

  defaultValue: None
  position: Named
  aliases: cf
  applicable:
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  - Security & Compliance
  parameterValueGroup: ""
- type: <xref href="Fqdn" data-throw-if-not-resolved="False" />
  name: DomainController
  description: |+
    This parameter is available only in on-premises Exchange.

    The DomainController parameter specifies the domain controller that's used by this cmdlet to read data from or write data to Active Directory. You identify the domain controller by its fully qualified domain name (FQDN). For example, dc01.contoso.com.

  defaultValue: None
  position: Named
  aliases: ""
  applicable:
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  - Security & Compliance
  parameterValueGroup: ""
- type: <xref href="Byte" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: FileData
  isRequired: true
  description: |+
    The FileData parameter specifies the name and path of the file from which text should be extracted.

    A valid value for this parameter requires you to read the file to a byte-encoded object using the following syntax: `([System.IO.File]::ReadAllBytes('<Path>\<FileName>'))`. You can use this command as the parameter value, or you can write the output to a variable (`$data = [System.IO.File]::ReadAllBytes('<Path>\<FileName>')`) and use the variable as the parameter value (`$data`).

  defaultValue: None
  position: "0"
  aliases: ""
  applicable:
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  - Security & Compliance
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    The WhatIf switch simulates the actions of the command. You can use this switch to view the changes that would occur without actually applying those changes. You don't need to specify a value with this switch.

  defaultValue: None
  position: Named
  aliases: wi
  applicable:
  - Exchange Server 2016
  - Exchange Server 2019
  - Exchange Online
  - Security & Compliance
  parameterValueGroup: ""
applicable:
- Exchange Server 2016
- Exchange Server 2019
- Exchange Online
- Security & Compliance
uid: ExchangePowerShell.Test-TextExtraction
name: Test-TextExtraction
description: |-
  This cmdlet returns the text that is found in a file in Exchange. The Microsoft classification engine uses this text to classify content and determine which sensitive information types are found in this file/message.

  You need to be assigned permissions before you can run this cmdlet. Although this topic lists all parameters for the cmdlet, you may not have access to some parameters if they're not included in the permissions assigned to you. To find the permissions required to run any cmdlet or parameter in your organization, see [Find the permissions required to run any Exchange cmdlet](https://learn.microsoft.com/powershell/exchange/find-exchange-cmdlet-permissions).
metadata:
  external help file: Microsoft.Exchange.RemoteConnections-Help.xml
  online version: https://learn.microsoft.com/powershell/module/exchange/test-textextraction
  applicable: Exchange Server 2016, Exchange Server 2019, Exchange Online, Security & Compliance
  title: Test-TextExtraction
  schema: 2.0.0
  author: chrisda
  ms.author: chrisda
  ms.reviewer: ""
