### YamlMime:PowershellCmdlet
summary: |-
  **NOTE**: The existence of this cmdlet is being documented for completeness, but do not use this cmdlet. We require that all creation and modification of app permission polices (not including the assignment or removal of policies from users) happens in the Microsoft Teams & Skype for Business Admin Center to ensure that the policy matches your expectations for the end user experience.

  As an admin, you can use app permission policies to enable or block specific apps for your users.  Learn more about the App Setup Policies: <https://learn.microsoft.com/microsoftteams/teams-app-permission-policies>.
module: MicrosoftTeamsPowerShell
notes: ""
inputs:
- name: <xref href="Microsoft.Teams.Policy.Administration.Cmdlets.Core.DefaultCatalogApp" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Teams.Policy.Administration.Cmdlets.Core.GlobalCatalogApp" data-throw-if-not-resolved="False" />
  description: ""
- name: <xref href="Microsoft.Teams.Policy.Administration.Cmdlets.Core.PrivateCatalogApp" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="System.Object" data-throw-if-not-resolved="False" />
  description: ""
syntaxes:
- >-
  Set-CsTeamsAppPermissionPolicy [-Tenant <System.Guid>] [-DefaultCatalogApps <>] [-GlobalCatalogApps <>]

   [-PrivateCatalogApps <>] [-Description <String>] [-DefaultCatalogAppsType <String>]

   [-GlobalCatalogAppsType <String>] [-PrivateCatalogAppsType <String>] [[-Identity] <XdsIdentity>] [-Force]

   [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-CsTeamsAppPermissionPolicy [-Tenant <System.Guid>] [-DefaultCatalogApps <>] [-GlobalCatalogApps <>]

   [-PrivateCatalogApps <>] [-Description <String>] [-DefaultCatalogAppsType <String>]

   [-GlobalCatalogAppsType <String>] [-PrivateCatalogAppsType <String>] [-Instance <PSObject>] [-Force] [-WhatIf]

   [-Confirm] [<CommonParameters>]
examples:
- title: Example 1
  code: |-
    $identity = "TestTeamsAppPermissionPolicy" + (Get-Date -Format FileDateTimeUniversal)
    New-CsTeamsAppPermissionPolicy -Identity Set-$identity
    Set-CsTeamsAppPermissionPolicy -Identity Set-$identity -DefaultCatalogAppsType BlockedAppList  -DefaultCatalogApps @()-GlobalCatalogAppsType -GlobalCatalogApps @() BlockedAppList -PrivateCatalogAppsType BlockedAppList -PrivateCatalogApps @()
  description: |-
    This example allows all Microsoft apps, third-party apps, and custom apps. No apps are blocked.
  summary: ""
- title: Example 2
  code: |-
    $identity = "TestTeamsAppPermissionPolicy" + (Get-Date -Format FileDateTimeUniversal)
    New-CsTeamsAppPermissionPolicy -Identity Set-$identity
    Set-CsTeamsAppPermissionPolicy -Identity Set-$identity -DefaultCatalogAppsType AllowedAppList -DefaultCatalogApps @() -GlobalCatalogAppsType AllowedAppList -GlobalCatalogApps @() -PrivateCatalogAppsType AllowedAppList -PrivateCatalogApps @()
  description: |-
    This example blocks all Microsoft apps, third-party apps, and custom apps. No apps are allowed.
  summary: ""
- title: Example 3
  code: |-
    $identity = "TestTeamsAppPermissionPolicy" + (Get-Date -Format FileDateTimeUniversal)
    # create a new Teams app permission policy and block all apps
    New-CsTeamsAppPermissionPolicy -Identity Set-$identity -DefaultCatalogAppsType AllowedAppList -GlobalCatalogAppsType AllowedAppList -PrivateCatalogAppsType AllowedAppList -DefaultCatalogApps @() -GlobalCatalogApps @() -PrivateCatalogApps @()

    $ListsApp = New-Object -TypeName Microsoft.Teams.Policy.Administration.Cmdlets.Core.DefaultCatalogApp -Property @{Id="0d820ecd-def2-4297-adad-78056cde7c78"}
    $OneNoteApp = New-Object -TypeName Microsoft.Teams.Policy.Administration.Cmdlets.Core.DefaultCatalogApp -Property @{Id="26bc2873-6023-480c-a11b-76b66605ce8c"}
    $DefaultCatalogAppList = @($ListsApp,$OneNoteApp)
    # set allow Lists and OneNote apps and block other Microsoft apps
    Set-CsTeamsAppPermissionPolicy -Identity Set-$identity -DefaultCatalogAppsType AllowedAppList -DefaultCatalogApps $DefaultCatalogAppList
  description: |-
    This example allows Microsoft Lists and OneNote apps and blocks other Microsoft apps. Microsoft Lists and OneNote can be installed by your users.
  summary: ""
- title: Example 4
  code: |-
    $identity = "TestTeamsAppPermissionPolicy" + (Get-Date -Format FileDateTimeUniversal)
    # create a new Teams app permission policy and block all apps
    New-CsTeamsAppPermissionPolicy -Identity Set-$identity -DefaultCatalogAppsType AllowedAppList -GlobalCatalogAppsType AllowedAppList -PrivateCatalogAppsType AllowedAppList -DefaultCatalogApps @() -GlobalCatalogApps @() -PrivateCatalogApps @()
    $TaskListApp = New-Object -TypeName Microsoft.Teams.Policy.Administration.Cmdlets.Core.GlobalCatalogApp -Property @{Id="57c81e84-9b7b-4783-be4e-0b7ffc0719af"}
    $OnePlanApp = New-Object -TypeName Microsoft.Teams.Policy.Administration.Cmdlets.Core.GlobalCatalogApp -Property @{Id="ca0540bf-6b61-3027-6313-a7cb4470bf1b"}
    $GlobalCatalogAppList = @($TaskListApp,$OnePlanApp)
    # set allow TaskList and OnePlan apps and block other Third-party apps
    Set-CsTeamsAppPermissionPolicy -Identity Set-$identity -GlobalCatalogAppsType AllowedAppList -GlobalCatalogApps $GlobalCatalogAppList
  description: |-
    This example allows third-party TaskList and OnePlan apps and blocks other third-party apps.  TaskList and OnePlan can be installed by your users.
  summary: ""
- title: Example 5
  code: |-
    $identity = "TestTeamsAppPermissionPolicy" + (Get-Date -Format FileDateTimeUniversal)
    # create a new Teams app permission policy and block all apps
    New-CsTeamsAppPermissionPolicy -Identity Set-$identity -DefaultCatalogAppsType BlockedAppList -GlobalCatalogAppsType BlockedAppList -PrivateCatalogAppsType BlockedAppList -DefaultCatalogApps @() -GlobalCatalogApps @() -PrivateCatalogApps @()
    $GetStartApp = New-Object -TypeName Microsoft.Teams.Policy.Administration.Cmdlets.Core.PrivateCatalogApp -Property @{Id="f8374f94-b179-4cd2-8343-9514dc5ea377"}
    $TestBotApp = New-Object -TypeName Microsoft.Teams.Policy.Administration.Cmdlets.Core.PrivateCatalogApp -Property @{Id="47fa3584-9366-4ce7-b1eb-07326c6ba799"}
    $PrivateCatalogAppList = @($GetStartApp,$TestBotApp)
    # set allow TaskList and OnePlan apps and block other custom apps
    Set-CsTeamsAppPermissionPolicy -Identity Set-$identity -PrivateCatalogAppsType AllowedAppList -PrivateCatalogApps $PrivateCatalogAppList
  description: |-
    This example allows custom GetStartApp and TestBotApp apps and blocks other custom apps. GetStartApp and TestBotApp can be installed by your users.
  summary: ""
parameters:
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: None
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="Microsoft.Teams.Policy.Administration.Cmdlets.Core.DefaultCatalogApp" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: DefaultCatalogApps
  description: |+
    Choose which Teams apps published by Microsoft or its partners can be installed by your users.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: DefaultCatalogAppsType
  description: |+
    Choose to allow or block the installation of Microsoft apps. Values that can be used: AllowedAppList, BlockedAppList.


  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Description
  description: |+
    Description of app setup permission policy.


  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Force
  description: |+
    Do not use.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Teams.Policy.Administration.Cmdlets.Core.GlobalCatalogApp" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: GlobalCatalogApps
  description: |+
    Choose which Teams apps published by a third party can be installed by your users.


  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: GlobalCatalogAppsType
  description: |+
    Choose to allow or block the installation of third-party apps. Values that can be used: AllowedAppList, BlockedAppList.


  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="XdsIdentity" data-throw-if-not-resolved="False" />
  name: Identity
  description: |+
    Name of App setup permission policy. If empty, all Identities will be used by default.


  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="PSObject" data-throw-if-not-resolved="False" />
  name: Instance
  description: |+
    Do not use.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Microsoft.Teams.Policy.Administration.Cmdlets.Core.PrivateCatalogApp" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: PrivateCatalogApps
  description: |+
    Choose to allow or block the installation of custom apps.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: PrivateCatalogAppsType
  description: |+
    Choose which custom apps can be installed by your users. Values that can be used: AllowedAppList, BlockedAppList.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="System.Guid" data-throw-if-not-resolved="False" />
  name: Tenant
  description: |+
    Do not use.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: None
  position: Named
  aliases: wi
  parameterValueGroup: ""
applicable:
- Microsoft Teams
uid: MicrosoftTeamsPowerShell.Set-CsTeamsAppPermissionPolicy
name: Set-CsTeamsAppPermissionPolicy
description: |-
  **NOTE**: The existence of this cmdlet is being documented for completeness, but do not use this cmdlet. We require that all creation and modification of app permission polices (not including the assignment or removal of policies from users) happens in the Microsoft Teams & Skype for Business Admin Center to ensure that the policy matches your expectations for the end user experience.

  As an admin, you can use app permission policies to enable or block specific apps for your users.  Learn more about the App Setup Policies: <https://learn.microsoft.com/microsoftteams/teams-app-permission-policies>.
metadata:
  external help file: Microsoft.Rtc.Management.dll-help.xml
  online version: https://learn.microsoft.com/powershell/module/teams/set-csteamsapppermissionpolicy
  applicable: Microsoft Teams
  title: Set-CsTeamsAppPermissionPolicy
  schema: 2.0.0
  ms.reviewer: ""
  manager: bulenteg
  ms.author: tomkau
  author: tomkau
